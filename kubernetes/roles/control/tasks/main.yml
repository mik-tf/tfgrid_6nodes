---
- name: Ensure kubelet is properly configured
  block:
    - name: Check if kubelet service file exists
      stat:
        path: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
      register: kubelet_service_file

    - name: Ensure kubelet service file is configured correctly
      blockinfile:
        path: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
        create: yes
        block: |
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          Environment="KUBELET_KUBEADM_ARGS=--cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=registry.k8s.io/pause:3.10"
          ExecStart=
          ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
      when: kubelet_service_file.stat.exists

    - name: Reload systemd daemon
      command: systemctl daemon-reload
      when: kubelet_service_file.stat.exists

    - name: Restart kubelet service
      service:
        name: kubelet
        state: restarted
        enabled: yes
      when: kubelet_service_file.stat.exists
  become: true

- name: Check if cluster is initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: cluster_initialized
  become: true

- name: Create .kube directory for root
  file:
    path: /root/.kube
    state: directory
    mode: '0755'
  become: true

- name: Initialize primary control plane
  command: >
    kubeadm init 
    --control-plane-endpoint "{{ primary_control_ip }}" 
    --pod-network-cidr=10.244.0.0/16 
    --upload-certs
    --apiserver-advertise-address="{{ ansible_host }}"
  args:
    creates: /etc/kubernetes/admin.conf
  when:
    - inventory_hostname == primary_control_node
    - not cluster_initialized.stat.exists
  become: true
  register: init_result

- name: Save admin config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
  when: inventory_hostname == primary_control_node
  become: true

- name: Install Flannel CNI
  command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  when: inventory_hostname == primary_control_node
  become: true

- name: Extract certificate key
  command: kubeadm init phase upload-certs --upload-certs
  register: cert_key
  when: inventory_hostname == primary_control_node
  become: true

- name: Generate join command (control plane)
  shell: >
    kubeadm token create --print-join-command | 
    sed "s/$/ --control-plane --certificate-key $(echo '{{ cert_key.stdout_lines[-1] }}')/"
  register: control_join_command
  when: inventory_hostname == primary_control_node
  become: true

- name: Save control plane join command
  copy:
    content: "{{ control_join_command.stdout }}"
    dest: /tmp/control-join-command
    mode: 0600
  when: inventory_hostname == primary_control_node
  become: true

- name: Generate worker join command
  command: kubeadm token create --print-join-command
  register: worker_join_command
  when: inventory_hostname == primary_control_node
  become: true

- name: Save worker join command
  copy:
    content: "{{ worker_join_command.stdout }}"
    dest: /tmp/worker-join-command
    mode: 0600
  when: inventory_hostname == primary_control_node
  become: true

- name: Set primary_control_node fact for delegation
  set_fact:
    primary_control_node_for_delegation: "{{ primary_control_node }}" 
  delegate_to: "{{ primary_control_node }}" 
  delegate_facts: true  
  when: inventory_hostname == primary_control_node

- name: Get join command for secondary control nodes
  slurp:
    src: /tmp/control-join-command
  register: control_join_command_secondary
  when: inventory_hostname != primary_control_node
  delegate_to: "{{ hostvars[primary_control_node]['ansible_hostname'] }}"

- name: Create .kube directory for secondary control nodes
  file:
    path: /root/.kube
    state: directory
    mode: '0755'
  when: inventory_hostname != primary_control_node
  become: true

- name: Join control plane nodes
  command: "{{ control_join_command_secondary.content | b64decode }}"
  when: inventory_hostname != primary_control_node
  become: true
  register: join_result
  failed_when: join_result.rc != 0 and "already exists" not in join_result.stderr
  async: 180
  poll: 15

- name: Copy admin.conf to secondary control nodes
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
  when: inventory_hostname != primary_control_node
  become: true